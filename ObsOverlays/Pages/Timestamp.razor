@page "/timestamp"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>OBS Browser Source Overlays</PageTitle>

@if (IsInsideObs == false)
{
    <div class="ms-3 mt-3 mb-5">
        <h1>OBS Browser Source Overlays</h1>
    </div>

    <div class="ms-5 container ms-auto">
        <div class="row">
            <div class="col-2 d-flex justify-content-center">
                <h6>Timestamp</h6>
            </div>
            <div class="col-2 d-flex justify-content-center">
                <h6>Placeholder</h6>
            </div>
            <div class="col-2 d-flex justify-content-center">
                <h6>Placeholder</h6>
            </div>
            <div class="col-2 d-flex justify-content-center">
                <h6>Placeholder</h6>
            </div>
            <div class="col-2 d-flex justify-content-center">
                <h6>Placeholder</h6>
            </div>
            <div class="col-2 d-flex justify-content-center">
                <h6>Placeholder</h6>
            </div>
        </div>
        <hr class="my-0" />
    </div>
}

<div class="p-4 h-100">
    <div class="d-flex flex-column flex-grow-1 h-100 justify-content-center">
        <div class="mx-auto config">
            <div>
                <h3>Timestamp</h3>
            </div>
            <div>
                <div class="mx-1 mt-1">
                    <label class="col-form-label col-form-label-sm">Title</label>
                    <input @bind-value="Title" class="form-control form-control-sm" type="text" placeholder="Title">
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <div class="mx-1 mt-1">
                    <label class="col-form-label col-form-label-sm">Hours</label>
                    <input @bind-value="Hours" class="form-control form-control-sm" type="text" placeholder="Hours">
                </div>
                <div class="mx-1 mt-1">
                    <label class="col-form-label col-form-label-sm">Minutes</label>
                    <input @bind-value="Minutes" class="form-control form-control-sm" type="text" placeholder="Minutes">
                </div>
                <div class="mx-1 mt-1">
                    <label class="col-form-label col-form-label-sm">Seconds</label>
                    <input @bind-value="Seconds" class="form-control form-control-sm" type="text" placeholder="Seconds">
                </div>
            </div>
            <div class="mx-1 mt-3 pt-1 w-100">
                <button @onclick="OnUpdate" type="button" class="btn btn-success w-100">Update</button>
            </div>
            <div class="container mt-3">
                <div class="row">
                    <div class="col-1" />
                    <div class="form-check col-4">
                        <input class="form-check-input" type="checkbox" @bind="Column1">
                        <label class="form-check-label">cabin sketch</label>
                    </div>
                    <div class="form-check col-3">
                        <input class="form-check-input" type="checkbox" @bind="Column2">
                        <label class="form-check-label">fantasy</label>
                    </div>
                    <div class="form-check col-3">
                        <input class="form-check-input" type="checkbox" @bind="Column3">
                        <label class="form-check-label">sans-serif</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-5">
            <div class="container">
                @foreach (var style in Styles)
                {
                    <div class="row mt-1 @style">
                        @if (Column1)
                        {
                            <div class="@ColumnStyle d-flex justify-content-center">
                                <h3>@((MarkupString)Text)</h3>
                            </div>
                        }
                        @if (Column2)
                        {
                            <div class="@ColumnStyle d-flex justify-content-center">
                                <h3 class="font1">@((MarkupString)Text)</h3>
                            </div>
                        }
                        @if (Column3)
                        {
                            <div class="@ColumnStyle d-flex justify-content-center">
                                <h3 class="font2">@((MarkupString)Text)</h3>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private DateTimeOffset? _startTimestamp = DateTimeOffset.UtcNow;

    public Timestamp()
    {
        Task.Run(Refresh);
    }

    public bool IsInsideObs { get; set; }
    public string Title { get; set; } = "Some title - ";
    public string Hours { get; set; } = "1";
    public string Minutes { get; set; } = "2";
    public string Seconds { get; set; } = "3";
    public string Text { get; set; }
    public bool Column1 { get; set; } = true;
    public bool Column2 { get; set; } = true;
    public bool Column3 { get; set; } = true;
    public string ColumnStyle { get; set; }
    public List<string> Styles = new()
    {
        "white-shadow",
        "dark-shadow",
        "red1-shadow",
        "red2-shadow",
        "green1-shadow",
        "green2-shadow",
        "blue1-shadow",
        "blue2-shadow",
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var userAgent = await JsRuntime.InvokeAsync<string>("getUserAgent");
            IsInsideObs = userAgent.Contains("OBS/");
        }
    }

    public async Task OnUpdate()
    {
        int.TryParse(Hours, out var hours);
        int.TryParse(Minutes, out var minutes);
        int.TryParse(Seconds, out var seconds);
        _startTimestamp = DateTimeOffset.UtcNow.AddHours(-hours).AddMinutes(-minutes).AddSeconds(-seconds);
    }

    private async Task Refresh()
    {
        await OnUpdate();
        while (true)
        {
            await Task.Delay(100);

            var columnCount = new[] { Column1, Column2, Column3 }.Count(e => e == true);
            ColumnStyle = columnCount switch
            {
                1 => "col-12",
                2 => "col-6",
                3 => "col-4",
                _ => "col-4",
            };

            var difference = (DateTimeOffset.UtcNow - _startTimestamp).Value;
            Text = $"{Title.Replace(" ", "&nbsp;")}{(((int)difference.TotalHours).ToString("D2"))} : {difference.Minutes:D2} : {difference.Seconds:D2}";
            StateHasChanged();
        }
    }
}
